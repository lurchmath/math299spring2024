
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                <script language="javascript">
                    const link = document.querySelector( '#loadlink > p > a' )
                    const thisURL = encodeURIComponent( window.location.href )
                    link?.setAttribute( 'href', 'https://proveitmath.org/lurch/?load=' + thisURL )
                </script>
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"minimal"</div><div data-category="main" data-key="header" data-value-type="html"><h1>Propositional Logic</h1>
<p>This is a basic library of the rules that define a natural deduction style formal system for Propositional Logic.</p>
<hr>
<h3><strong>Constants</strong></h3>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare ⇔, and, ⇒, or, ¬, contradiction&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">⇔</span><span class="ML__text">, and, </span><span class="ML__cmr">⇒</span><span class="ML__text">, or, </span><span class="ML__ams">¬</span><span class="ML__text">, and </span><span class="ML__cmr">→←</span></span></span></span></span></p>
<h3><strong>Rules</strong></h3>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p style="text-align: left;"><strong>and+</strong></p>
<p style="text-align: left;"><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W and V&quot;" data-metadata_latex="&quot; W\\text{ and } V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>and-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W and V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>implies+</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V&quot;" data-metadata_latex="&quot; W\\Rightarrow V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>implies- (modus ponens)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W implies V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>iff+</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span>&nbsp;</p>
</div>
<p>&nbsp;</p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W iff V&quot;" data-metadata_latex="&quot; W\\Leftrightarrow V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇔</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>iff-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W iff V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇔</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>or+</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or V&quot;" data-metadata_latex="&quot; W\\text{ or } V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V or W&quot;" data-metadata_latex="&quot; V\\text{ or } W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>or- (proof by cases)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W implies U&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V implies U&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;U&quot;" data-metadata_latex="&quot;U&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span>&nbsp;</p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>not+ (proof by contradiction)</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;" data-metadata_latex="&quot;\\rightarrow\\leftarrow&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not W&quot;" data-metadata_latex="&quot;\\neg W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>not- (proof by contradiction)</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p>&nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;" data-metadata_latex="&quot;\\rightarrow\\leftarrow&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>contradiction+</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<hr>
<h1>Predicate Logic with Equality</h1>
<p>This is a basic library of the rules that define a natural deduction style formal system for Predicate Logic with equality.&nbsp;</p>
<hr>
<div>
<h3>Constants</h3>
<div><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare ∀, ∃, ∃!, =&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">∀</span><span class="ML__text">, </span><span class="ML__cmr">∃</span><span class="ML__text">, </span><span class="ML__cmr">∃!</span><span class="ML__text">, and </span><span class="ML__cmr">=</span></span></span></span></span> to be constants.</div>
<h3>Quantifier Rules</h3>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;">forall+</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let z&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.05em;">z</span></span></span></span></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(a variable declaration)&nbsp;</p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(z)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.05em;">z</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∀</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>forall-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume forall x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">∀</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>exists+</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;exists x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>exists-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume exists x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">∃</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(c) for some c&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> for some </span><span class="ML__mathit">c</span></span></span></span></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (constant declaration)</p>
</div>
<h3>Equality</h3>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>reflexivity&nbsp; &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W=W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>substitution</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume w=v&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.03em;">w</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">v</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(w)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.03em;">w</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(v)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">v</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
</div>
<h3>Unique Existence</h3>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>unique existence-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume ∃!x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">∃!</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(c) and (forall y.(𝜆P(y) implies y=c)) for some c&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> and </span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">∀</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">=</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> for some </span><span class="ML__mathit">c</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>unique existence+</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let y be such that 𝜆P(y)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__text"> be such that </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;y=t&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">=</span><span class="ML__mathit">t</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;∃!x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃!</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
<hr>
<div>
<h1>Logic Theorems</h1>
<p>This is a basic library of the rules that are theorems provable in the system defined by the rules in the Predicate Logic with Equality library.</p>
<hr>
<h3>Constants</h3>
<p>No additional constants required.</p>
<h3>Theorems (as rules)</h3>
<div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>excluded middle</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>double negative</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (not W) ≡ W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: -0.2em; height: 0.8999999999999999em;"><span class="ML__small-delim ML__open">(</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">≡</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>commutativity of 'or'</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V or W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>associativity of 'or'</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(W or V) or U ≡ W or (V or U)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.11em;">U</span><span class="ML__cmr">≡</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.11em;">U</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>alternate definition of 'implies'</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V ≡ not W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>alternate or-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>alternate or-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>negated implication</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W implies V)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span>&nbsp; <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span> and&nbsp; <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>contrapositive</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span> &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡ &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span> &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not V implies not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">⇒</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>DeMorgan's Law</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W and V) ≡ not W or not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>DeMorgan's Law</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W or V) ≡ not W and not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Anything follows from a contradiction</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume contradiction&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">→←</span></span></span></span></span>&nbsp;</p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
</div>
<hr>
<h1>Peano Axioms</h1>
<div>This is a library containing the Peano Axioms. They define a formal system for the Natural Numbers.&nbsp; This library includes all of the rules, definitions, and axioms from the Logic-Theorems library.</div>
<hr>
<h3>Constants</h3>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare 0, sigma, +, ⋅, ≤&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">0</span><span class="ML__text">, </span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__text">, </span><span class="ML__cmr">+</span><span class="ML__text">, </span><span class="ML__cmr">⋅</span><span class="ML__text">, and </span><span class="ML__cmr">≤</span></span></span></span></span></p>
<h3>Peano Axioms</h3>
<h4><strong>The set ℕ</strong></h4>
<p>&nbsp; &nbsp; We don't need axioms N0 or N1.</p>
<p>&nbsp; &nbsp; <strong>N0:</strong> <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;0&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span></span></span></span></span> is a natural number.</p>
<p>&nbsp; &nbsp; <strong>N1:</strong> For all natural numbers&nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span>, the successor of <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span> is a natural number.</p>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>N2 (successor is injective)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume sigma(m)=sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>N3 (zero is first)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;0 neq sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span><span class="ML__rlap"><span class="ML__inner"><span class="ML__cmr"></span></span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>N4 (induction)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let k be such that 𝜆P(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> be such that </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.𝜆P(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∀</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div><strong>Addition</strong></div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>A0:&nbsp; &nbsp; </strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n+0=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>A1:&nbsp; &nbsp;&nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m+sigma(n)=sigma(m+n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div><strong>Multiplication</strong></div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>M0: &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n*0=0&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">⋅</span><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__cmr">0</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>M1: &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m*sigma(n) = m+m*n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<div><strong>Order</strong></div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>I: &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m leq n ≡ exists k.m+k=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">≤</span><span class="ML__mathit">n</span><span class="ML__cmr">≡</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<hr></div>
</div>
</div>
</div>
<h1>Number Theory</h1>
<p>This library contains some definitions from Number Theory.&nbsp; It includes all of the rules in the Peano Axioms library.</p>
<hr>
<h3>Constants</h3>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare 1, 2, 3, 4, 5, is, |, prime, even, odd&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">1</span><span class="ML__text">, </span><span class="ML__cmr">2</span><span class="ML__text">, </span><span class="ML__cmr">3</span><span class="ML__text">, </span><span class="ML__cmr">4</span><span class="ML__text">, </span><span class="ML__cmr">5</span><span class="ML__text">, is, </span><span class="ML__cmr">∣</span><span class="ML__text">, prime, even, and odd</span></span></span></span></span></p>
<h3>Definitions</h3>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Base ten digits</strong><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1=sigma(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;2=sigma(1)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">2</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;3=sigma(2)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">3</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">2</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;4=sigma(3)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">4</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">3</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;5=sigma(5)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">5</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">5</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Divides:&nbsp; &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m|n ≡ exists k.n=m*k&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">∣</span><span class="ML__mathit">n</span><span class="ML__cmr">≡</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Prime: &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is prime&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is prime</span></span></span></span></span>&nbsp; &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span>&nbsp; <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1<n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">&lt;</span><span class="ML__mathit">n</span></span></span></span></span>&nbsp; and &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (exists k.(1<k and k<n) and k|n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.0391em; height: 0.73354em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__cmr">&lt;</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">&lt;</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">∣</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Even:</strong> &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n is even &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span> then <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n=2*m for some m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span><span class="ML__text"> for some </span><span class="ML__mathit">m</span></span></span></span></span>.&nbsp;</p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Even: </strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n=2*m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span></span></span></span></span> then <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is even&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span>.</p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Odd:&nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is odd ≡ not n is even&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is odd</span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span></p>
</div>
<hr></div>
</div>
<h1>Equations</h1>
<p>The Equations Rule is a special built-in validation tool that Lurch provides for dealing with proofs involving lengthy transitive chains of equations, such as&nbsp;</p>
<p>&nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\begin{align*} a &amp;= b \\\\ &amp;=c \\\\ &amp;=d&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__mathit">a</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">b</span></span></span><span style="top: -3.01em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">c</span></span></span><span style="top: -1.51em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">d</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">(entered as&nbsp;<code>a=b=c=d</code>).&nbsp; It automates the application of the substitution and reflexive rules of equality, its derived properties of symmetry and transitivity, and checks each pair in the chain for both direct equality, and equality via a single substitution.&nbsp; This topic includes everything from the Number Theory topic.</p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Equations Rule:</strong> &nbsp; <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;EquationsRule&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">EquationsRule</span></span></span></span></span></p>
</div>
<hr>
<p>&nbsp;</p><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;../math/Equations-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"minimal"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;../math/Number-theory-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"minimal"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;../math/Peano-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"minimal"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;../math/Logic-theorems-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"minimal"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;../math/Pred-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"minimal"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;../math/Prop-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="main" data-key="header" data-value-type="html"></div><div data-category="settings" data-key="shell style" data-value-type="json">"boxed"</div></div>
            <div id="document"><h1>Propositional Logic</h1>
<p>This is a basic library of the rules that define a natural deduction style formal system for Propositional Logic.</p>
<hr>
<h3><strong>Constants</strong></h3>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare ⇔, and, ⇒, or, ¬, contradiction&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">⇔</span><span class="ML__text">, and, </span><span class="ML__cmr">⇒</span><span class="ML__text">, or, </span><span class="ML__ams">¬</span><span class="ML__text">, and </span><span class="ML__cmr">→←</span></span></span></span></span></p>
<h3><strong>Definitions</strong></h3>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p style="text-align: left;"><strong>and+</strong></p>
<p style="text-align: left;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W and V&quot;" data-metadata_latex="&quot; W\\text{ and } V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>and-</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W and V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>implies+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V&quot;" data-metadata_latex="&quot; W\\Rightarrow V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>implies- (modus ponens)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W implies V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>iff+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span>&nbsp;</p>
</div>
<p>&nbsp;</p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W iff V&quot;" data-metadata_latex="&quot; W\\Leftrightarrow V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇔</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>iff-</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W iff V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇔</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>or+</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or V&quot;" data-metadata_latex="&quot; W\\text{ or } V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V or W&quot;" data-metadata_latex="&quot; V\\text{ or } W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>or- (proof by cases)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W implies U&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V implies U&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;U&quot;" data-metadata_latex="&quot;U&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span>&nbsp;</p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>not+ (proof by contradiction)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;" data-metadata_latex="&quot;\\rightarrow\\leftarrow&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not W&quot;" data-metadata_latex="&quot;\\neg W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>not- (proof by contradiction)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;" data-metadata_latex="&quot;\\rightarrow\\leftarrow&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>contradiction+</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;→←&quot;" data-metadata_latex="&quot;\\rightarrow\\leftarrow&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<hr>
<p>&nbsp;</p></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Prop-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><h1>Predicate Logic with Equality</h1>
<p>This is a basic library of the rules that define a natural deduction style formal system for Predicate Logic with equality.&nbsp;</p>
<hr>
<div>
<h3>Constants</h3>
<div><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare ∀, ∃, ∃!, =&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">∀</span><span class="ML__text">, </span><span class="ML__cmr">∃</span><span class="ML__text">, </span><span class="ML__cmr">∃!</span><span class="ML__text">, and </span><span class="ML__cmr">=</span></span></span></span></span> to be constants.</div>
<h3>Quantifier Rules</h3>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;">forall+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let z&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.05em;">z</span></span></span></span></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(a variable declaration)&nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(z)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.05em;">z</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∀</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>forall-</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume forall x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">∀</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>exists+</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;exists x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>exists-</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume exists x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">∃</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(c) for some c&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> for some </span><span class="ML__mathit">c</span></span></span></span></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (constant declaration)</p>
</div>
<h3>Equality</h3>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>reflexivity&nbsp; &nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W=W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>substitution</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume w=v&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.03em;">w</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">v</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(w)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.03em;">w</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(v)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">v</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
</div>
<h3>Unique Existence</h3>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>unique existence-</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume ∃!x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">∃!</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(c) and (forall y.(𝜆P(y) implies y=c)) for some c&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> and </span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">∀</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">=</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> for some </span><span class="ML__mathit">c</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>unique existence+</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let y be such that 𝜆P(y)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__text"> be such that </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;y=t&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">=</span><span class="ML__mathit">t</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;∃!x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃!</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
<hr></div>
</div></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Pred-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><div>
<div>&nbsp;</div>
</div>
<h1>Logic Theorems</h1>
<p>This is a basic library of the rules that are theorems provable in the system defined by the rules in the Predicate Logic with Equality library.</p>
<hr>
<h3>Constants</h3>
<p>No additional constants required.</p>
<h3>Theorems (as rules)</h3>
<div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>excluded middle</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>double negative</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (not W) ≡ W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: -0.2em; height: 0.8999999999999999em;"><span class="ML__small-delim ML__open">(</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">≡</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>commutativity of 'or'</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V or W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>associativity of 'or'</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(W or V) or U ≡ W or (V or U)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.11em;">U</span><span class="ML__cmr">≡</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.11em;">U</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>alternate definition of 'implies'</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V ≡ not W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>alternate or-</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>alternate or-</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>negated implication</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W implies V)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> &nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span>&nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span> and&nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>contrapositive</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span> &nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡ &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span> &nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not V implies not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">⇒</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>DeMorgan's Law</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W and V) ≡ not W or not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>DeMorgan's Law</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W or V) ≡ not W and not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Anything follows from a contradiction</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume →←&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">→←</span></span></span></span></span>&nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<hr></div>
</div></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Logic-theorems-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><div>
<div>
<div>
<h1>Peano Axioms</h1>
<div>This is a library containing the Peano Axioms. They define a formal system for the Natural Numbers.&nbsp; This library includes all of the rules, definitions, and axioms from the Logic-Theorems library.</div>
<hr>
<h3>Constants</h3>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare 0, sigma, +, ⋅, ≤&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">0</span><span class="ML__text">, </span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__text">, </span><span class="ML__cmr">+</span><span class="ML__text">, </span><span class="ML__cmr">⋅</span><span class="ML__text">, and </span><span class="ML__cmr">≤</span></span></span></span></span></p>
<h3>Peano Axioms</h3>
<h4><strong>The set ℕ</strong></h4>
<p>&nbsp; &nbsp; We don't need axioms N0 or N1.</p>
<p>&nbsp; &nbsp; <strong>N0:</strong> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;0&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span></span></span></span></span> is a natural number.</p>
<p>&nbsp; &nbsp; <strong>N1:</strong> For all natural numbers&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span>, the successor of <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span> is a natural number.</p>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>N2 (successor is injective)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume sigma(m)=sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>N3 (zero is first)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;0 neq sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span><span class="ML__rlap"><span class="ML__inner"><span class="ML__cmr"></span></span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>N4 (induction)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let k be such that 𝜆P(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> be such that </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.𝜆P(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∀</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div><strong>Addition</strong></div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>A0:&nbsp; &nbsp; </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n+0=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>A1:&nbsp; &nbsp;&nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m+sigma(n)=sigma(m+n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div><strong>Multiplication</strong></div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>M0: &nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n*0=0&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">⋅</span><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__cmr">0</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>M1: &nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m*sigma(n) = m+m*n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<div><strong>Order</strong></div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>I: &nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m leq n ≡ exists k.m+k=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">≤</span><span class="ML__mathit">n</span><span class="ML__cmr">≡</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<hr></div>
</div>
</div></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Peano-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><div>
<div>&nbsp;</div>
</div>
<h1>Number Theory</h1>
<p>This library contains some definitions from Number Theory.&nbsp; It includes all of the rules in the Peano Axioms library.</p>
<hr>
<h3>Constants</h3>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare 1, 2, 3, 4, 5, is, |, prime, even, odd&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">1</span><span class="ML__text">, </span><span class="ML__cmr">2</span><span class="ML__text">, </span><span class="ML__cmr">3</span><span class="ML__text">, </span><span class="ML__cmr">4</span><span class="ML__text">, </span><span class="ML__cmr">5</span><span class="ML__text">, is, </span><span class="ML__cmr">∣</span><span class="ML__text">, prime, even, and odd</span></span></span></span></span></p>
<h3>Definitions</h3>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Base ten digits</strong><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1=sigma(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;2=sigma(1)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">2</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;3=sigma(2)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">3</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">2</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;4=sigma(3)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">4</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">3</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;5=sigma(5)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">5</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">5</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Divides:&nbsp; &nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m|n ≡ exists k.n=m*k&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">∣</span><span class="ML__mathit">n</span><span class="ML__cmr">≡</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Prime: &nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is prime&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is prime</span></span></span></span></span>&nbsp; &nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span>&nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1<n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">&lt;</span><span class="ML__mathit">n</span></span></span></span></span>&nbsp; and &nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (exists k.(1<k and k<n) and k|n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.0391em; height: 0.73354em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__cmr">&lt;</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">&lt;</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">∣</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Even:&nbsp; </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n is even &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span> then <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n=2*m for some m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span><span class="ML__text"> for some </span><span class="ML__mathit">m</span></span></span></span></span>.</p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Even: </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n=2*m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span></span></span></span></span> then <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is even&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span>.</p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Odd:&nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is odd ≡ not n is even&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is odd</span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span></p>
</div>
<hr></div>
</div></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Number-theory-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><h1>Equations</h1>
<p>The Equations Rule is a special built-in validation tool that Lurch provides for dealing with proofs involving lengthy transitive chains of equations, such as&nbsp;</p>
<p>&nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\begin{align*} a &amp;= b \\\\ &amp;=c \\\\ &amp;=d&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__mathit">a</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">b</span></span></span><span style="top: -3.01em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">c</span></span></span><span style="top: -1.51em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">d</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">(entered as&nbsp;<code>a=b=c=d</code>).&nbsp; It automates the application of the substitution and reflexive rules of equality, its derived properties of symmetry and transitivity, and checks each pair in the chain for both direct equality, and equality via a single substitution.&nbsp; This topic includes everything from the Number Theory topic.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Equations Rule:</strong> &nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;EquationsRule&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">EquationsRule</span></span></span></span></span></p>
</div>
<hr>
<p>&nbsp;</p></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Equations-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><div>&nbsp;</div>
<p><span style="color: rgb(126, 140, 141);">Name:</span></p>
<h1 style="text-align: center;">Assignment #12</h1>
<h4 style="text-align: center;">Due: Tuesday, March 19</h4>
<p><span style="font-size: 12pt;">Here it is, future mathematicians!&nbsp; Let's prove facts about numbers!</span></p>
<h4>Instructions</h4>
<p><span style="font-size: 12pt;">Follow the instructions for the previous assignments.&nbsp; Save your file to your Dropbox folder in a subfolder called <code>Assignment #12</code>and name the file&nbsp;<code>Assignment #12 - name.lurch</code> (where&nbsp;<code>name</code>is replaced with either your first or last name).&nbsp; The assignment is due in your Dropbox folder before class on Tuesday.<span style="color: rgb(132, 63, 161);"><em>&nbsp;&nbsp;</em></span></span><br><br><span style="font-size: 12pt;">Game on!&nbsp; Enjoy!</span></p>
<hr>
<p><span style="font-size: 12pt;">Prove each of the following theorems with a semiformal proof, but you cannot use any theorems (such as those in section 6.3 of the notes or any we have previously proven) whatsoever, only the rules of inference for Logic with Equality.&nbsp; Give reasons for <strong>all</strong> statements (except for assumptions and 'Let' declarations), but you don't have to use line numbers or cite premises by line numbers after your reasons.&nbsp; After proving each Theorem below you can use the derived rule (in blue) as a rule to prove the subsequent theorems, but not the theorems above the rule.</span></p>
<p><span style="font-size: 12pt;">You can use transitive chains in these proofs.&nbsp; To type a transitive chain in Lurch just enter all of the parts separated by equal signs.&nbsp; You can use <code>SHIFT+ENTER</code>to add an extra line inside the expression editor where you type the expressions.&nbsp; For example,</span></p>
<p style="text-align: center;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;a = b\n  = c\n  = d&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__mathit">a</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">b</span></span></span><span style="top: -3.01em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">c</span></span></span><span style="top: -1.51em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">d</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></p>
<p><span style="font-size: 12pt;">We proved this first one in class together, so you can use it as a rule in all of these proofs.&nbsp; When using such a rule as a reason you can refer to it by its theorem number (.e.g&nbsp;&nbsp;<em>by theorem 7.2) </em>or by it's description in parentheses (.e.g&nbsp;<em> by the 'nonzero is a successor' theorem).</em></span></p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><span style="font-size: 12pt;"><strong>Theorem 7.2 (nonzero is a successor): </strong></span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n neq 0&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__rlap"><span class="ML__inner"><span class="ML__cmr"></span></span></span><span class="ML__cmr">=</span><span class="ML__cmr">0</span></span></span></span></span><span style="font-size: 12pt;"> then </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;exists m.n=sigma(m)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&exist;</span><span class="ML__mathit">m</span><span class="ML__cmr">.</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span><span style="font-size: 12pt;">.</span></p>
</div>
<h4><span style="font-size: 12pt;">Induction vs Forall+</span></h4>
<p><span style="font-size: 12pt;">There are (at least) two different ways to prove a forall statement when the domain of discourse is the natural numbers.&nbsp; One way is to use the </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall+&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__cmr">+</span></span></span></span></span><span style="font-size: 12pt;"> rule and the other is to use induction (Peano Axiom N4).&nbsp; Sometimes you can prove the theorem both ways.&nbsp; Other times only one method will work by itself.&nbsp; </span></p>
<p><span style="font-size: 12pt;">Let's do an example where we prove the same theorem using both methods for comparison.&nbsp; Let's proof that every natural number equals itself.</span></p>
<div class="lurch-atom" data-metadata_type="&quot;theorem&quot;" data-shell_title="Theorem:">
<p><span style="font-size: 12pt;"><strong>Theorem (all natural numbers equal themselves):&nbsp;</strong> </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n. n = n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<p><span style="font-size: 12pt;">Notice that this is a forall-statement about natural numbers. Here's the first proof using the forall+ rule.</span></p>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><span style="font-size: 12pt;"><strong>Proof:<br></strong></span></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let s &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit">s</span></span></span></span></span><span style="font-size: 12pt;"> be arbitrary.</span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;s = s&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">s</span><span class="ML__cmr">=</span><span class="ML__mathit">s</span></span></span></span></span><span style="font-size: 12pt;"> by reflexivity of =.&nbsp; &nbsp; &nbsp;&nbsp;</span></p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n. n=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span><span style="font-size: 12pt;">&nbsp; &nbsp;by forall+.&nbsp; &nbsp;&nbsp;</span></p>
<p><span style="font-size: 12pt;"><strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span></strong></span></p>
</div>
<p><span style="font-size: 12pt;">Now let's do the same proof with induction (this is overkill, because the previous proof is so simple, but it's just an example).&nbsp; Here </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="ML__mathit">n</span><span class="ML__cmr">)</span></span></span></span></span><span style="font-size: 12pt;"> must be the expression to the right of the </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span></span></span></span></span><span style="font-size: 12pt;"> in the theorem, so </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="ML__mathit">n</span><span class="ML__cmr">)</span></span></span></span></span><span style="font-size: 12pt;"> is the statement&nbsp;</span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span><span style="font-size: 12pt;">.&nbsp; In the template recipe for induction given in the notes, which we derived in class from N4, we will need </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(0)</span></span></span></span></span><span style="font-size: 12pt;">, </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">)</span></span></span></span></span><span style="font-size: 12pt;">, and </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(\\sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">))</span></span></span></span></span><span style="font-size: 12pt;">.&nbsp; So let's list them here up front so we know what to plug into the proof:</span></p>
<p style="padding-left: 200px;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(0) &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(0)</span></span></span></span></span><span style="font-size: 12pt;"> is the statement </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;0=0&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__cmr">0</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">)</span></span></span></span></span><span style="font-size: 12pt;"> is the statement </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;k=k&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(\\sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">))</span></span></span></span></span><span style="font-size: 12pt;"> is the statement </span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\sigma(k)=\\sigma(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">)</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">)</span></span></span></span></span></p>
<p><span style="font-size: 12pt;">Now we have all of the pieces we need to do an induction.&nbsp;</span></p>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><span style="font-size: 12pt;"><strong>Proof:</strong>&nbsp;<em>We will prove this theorem by induction</em></span></p>
<p><span style="font-size: 12pt;">&nbsp;</span></p>
<p><span style="font-size: 12pt;"><em>Base case:</em></span></p>
<p><span style="font-size: 12pt;">&nbsp;</span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;0=0&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__cmr">0</span></span></span></span></span><span style="font-size: 12pt;">&nbsp; by reflexive&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(149, 165, 166);">(<em>this is <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(0)</span></span></span></span></span>)</em></span></span></p>
<p><span style="font-size: 12pt;">&nbsp;</span></p>
<p><span style="font-size: 12pt;"><em>Inductive step:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(149, 165, 166);">(notice that this must be a subproof)</span></em></span></p>
<p style="padding-left: 40px;">&nbsp;</p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let k be such that k=k&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> be such that </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span></span></span></span></span><span style="font-size: 12pt;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(149, 165, 166);">(<em>this is <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">))</span></span></span></span></span></em></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;sigma(k)=sigma(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span><span style="font-size: 12pt;"> by reflexive&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(149, 165, 166);">(this is <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(\\sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">))</span></span></span></span></span></span><span style="color: rgb(149, 165, 166);">)</span></span></p>
</div>
<p><span style="font-size: 12pt;"><em><br>Inductive conclusion:</em></span><br><br><span style="font-size: 12pt;">&nbsp;</span><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.n=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span><span style="font-size: 12pt;">&nbsp; by induction.</span></p>
<p><span style="font-size: 12pt;"><strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span></strong></span></p>
</div>
<p><span style="font-size: 12pt;">Since we only had one example of this so far in class, in the following problems I will give you a hint and tell you when to use forall+ and when to use induction.&nbsp; I also worked out Problem #3 since that is the hardest proof in this assignment so you would have another example to go by.</span>&nbsp;</p>
<hr>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span style="background-color: rgb(45, 194, 107); color: rgb(236, 240, 241);">&nbsp; Problem 1.<strong>&nbsp;</strong></span> &nbsp;(<em>Hint: prove this by induction.</em>)</p>
<div class="lurch-atom" data-metadata_type="&quot;theorem&quot;" data-shell_title="Theorem:">
<p><strong>Theorem 7.3 (no number is its own successor): &nbsp; </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n. n neq sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__mathit">n</span><span class="ML__rlap"><span class="ML__inner"><span class="ML__cmr"></span></span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><strong>Proof:</strong>&nbsp;</p>
<p>&nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span></p>
</div>
</div>
<p>The rule derived from this theorem does not need the quantifier.&nbsp; You don't have to do anything with this.&nbsp; It is just here so you can use it as a rule in the remaining proofs (but not the first proof).</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Corollary 7.3: </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n neq sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__rlap"><span class="ML__inner"><span class="ML__cmr"></span></span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<hr>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span style="background-color: rgb(45, 194, 107); color: rgb(236, 240, 241);">&nbsp; Problem 2.</span> &nbsp;(<em>Hint: prove this for arbitrary <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span>, i.e. don't use induction, use forall+.</em>)</p>
<div class="lurch-atom" data-metadata_type="&quot;theorem&quot;" data-shell_title="Theorem:">
<p><strong>Theorem 7.4 (alternate definition of <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\sigma&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span></span></span></span></span>):</strong> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.sigma(n)=n+1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span></span></span></span></span> &nbsp;</p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><strong>Proof:</strong></p>
<p>&nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span></p>
</div>
</div>
<p>The rule derived from this theorem also does not need the quantifier.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Corollary 7.4: </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;sigma(n)=n+1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span></span></span></span></span></p>
</div>
<hr>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span style="background-color: rgb(45, 194, 107); color: rgb(236, 240, 241);">&nbsp; Problem 3.&nbsp;</span></p>
<div class="lurch-atom" data-metadata_type="&quot;theorem&quot;" data-shell_title="Theorem:">
<p><strong>Theorem 7.5 (associativity of addition):</strong></p>
<p style="text-align: center;">&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall m.forall n.forall p.(m+n)+p=m+(n+p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">m</span><span class="ML__cmr">.&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.&forall;</span><span class="ML__mathit">p</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.7777700000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><strong>Proof:</strong> <em>We will prove this by induction on <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;p&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">p</span></span></span></span></span>&nbsp;for arbitrary <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span></span></span></span></span> and <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span>.&nbsp;</em></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit">m</span></span></span></span></span> be arbitrary.</p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit">n</span></span></span></span></span> be arbitrary.</p>
<p>&nbsp;</p>
<p><span style="color: rgb(149, 165, 166);"><em>(we now will prove&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall p.P(p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">p</span><span class="ML__cmr">.</span><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="ML__mathit">p</span><span class="ML__cmr">)</span></span></span></span></span> by induction where <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="ML__mathit">p</span><span class="ML__cmr">)</span></span></span></span></span> is the statement <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;(m+n)+p=m+(n+p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__cmr">)</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__cmr">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__cmr">)</span></span></span></span></span>, so we need <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(0)</span></span></span></span></span>, <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">)</span></span></span></span></span>, and <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(\\sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">))</span></span></span></span></span></em></span><span style="color: rgb(149, 165, 166);"><em>)&nbsp;</em></span></p>
<p>&nbsp;</p>
<p><em>Base case:</em></p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">By Axiom A0 we have</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: center;"><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(m+n)+0 = m+n\n        = m+(n+0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.6em;"><span style="top: -3.76em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__cmr">0</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.6em;"><span style="top: -3.76em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span></span></span><span style="top: -2.25em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.72777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span>&nbsp;</em></p>
<p>&nbsp;</p>
<p><em>Inductive step.</em></p>
<p>&nbsp;</p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let k be such that (m+n)+k=m+(n+k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> be such that </span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.77777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p>Then by A1, substitution, and A1 twice, we have</p>
<p>&nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(m+n)+sigma(k) = sigma((m+n)+k)\n               = sigma(m+(n+k))\n               = m+sigma(n+k)\n               = m+(n+sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 3.11em;"><span style="top: -5.26em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 3.11em;"><span style="top: -5.26em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -3.76em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.77777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -2.26em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.77777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -0.76em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></p>
</div>
<p>&nbsp;</p>
<p>&nbsp;<em>Inductive conclusion.</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall p.(m+n)+p=m+(n+p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">p</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.7777700000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> by induction</p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.forall p.(m+n)+p=m+(n+p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.&forall;</span><span class="ML__mathit">p</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.7777700000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> by forall+.</p>
</div>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall m.forall n.forall p.(m+n)+p=m+(n+p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">m</span><span class="ML__cmr">.&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.&forall;</span><span class="ML__mathit">p</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.7777700000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> by forall+.</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span></p>
<p><span style="color: rgb(149, 165, 166);"><em>(Notice that the <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">m</span></span></span></span></span> and <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span></span></span></span></span> are proved by forall+, while the <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall p&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">p</span></span></span></span></span> is proved by induction in the last three statements in the proof.)</em></span></p>
</div>
</div>
<p>The rule derived from this theorem also does not need any of the quantifiers.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Corollary 7.5: </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(m+n)+p = m+(n+p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.7777700000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<hr>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span style="background-color: rgb(45, 194, 107); color: rgb(236, 240, 241);">&nbsp; Problem 4. </span>&nbsp;(<em>Hint: prove this by induction.</em>)</p>
<div class="lurch-atom" data-metadata_type="&quot;theorem&quot;" data-shell_title="Theorem:">
<p><strong>Theorem 7.6 (additive identity, part 2): </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.0+n=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.0</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><strong>Proof:</strong></p>
<p>&nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span></p>
</div>
</div>
<p>The rule derived from this theorem also does not need the quantifier.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Corollary 7.6: </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;0+n=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<hr>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span style="background-color: rgb(45, 194, 107); color: rgb(236, 240, 241);">&nbsp; Problem 5. </span>&nbsp;(<em>Hint: prove this by induction.</em>)</p>
<div class="lurch-atom" data-metadata_type="&quot;theorem&quot;" data-shell_title="Theorem:">
<p><strong>Theorem 7.7 (commutativity of adding 1):</strong>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.1+n=n+1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.1</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><strong>Proof:</strong></p>
<p>&nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span></p>
</div>
</div>
<p>The rule derived from this theorem also does not need the quantifier.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Corollary 7.7: </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1+n=n+1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span></span></span></span></span></p>
</div>
<hr>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span style="background-color: rgb(45, 194, 107); color: rgb(236, 240, 241);">&nbsp; Problem 5. </span>&nbsp;(<em>Hint: prove this by induction on <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span> for arbitrary <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span></span></span></span></span>.</em>)</p>
<div class="lurch-atom" data-metadata_type="&quot;theorem&quot;" data-shell_title="Theorem:">
<p><strong>Theorem 7.8 (commutativity of addition):</strong>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall m.forall n.m+n=n+m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">m</span><span class="ML__cmr">.&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><strong>Proof:</strong></p>
<p>&nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span></p>
</div>
</div>
<p>The rule derived from this theorem also does not need the quantifier.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Corollary 7.8: </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m+n=n+m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span></span></span></span></span></p>
</div>
<hr>
<p>&nbsp;</p></div>
        